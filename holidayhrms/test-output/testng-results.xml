<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="94" passed="88" failed="6" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-07-07T15:55:38 IST" name="Default suite" finished-at="2023-07-07T15:55:46 IST" duration-ms="8487">
    <groups>
    </groups>
    <test started-at="2023-07-07T15:55:38 IST" name="Default test" finished-at="2023-07-07T15:55:46 IST" duration-ms="8487">
      <class name="test.TestReferenceDocumentDAOImpl">
        <test-method is-config="true" signature="setup()[pri:0, instance:test.TestReferenceDocumentDAOImpl@57d0c779]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="32" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testDeleteById()[pri:0, instance:test.TestReferenceDocumentDAOImpl@57d0c779]" started-at="2023-07-07T15:55:45 IST" name="testDeleteById" finished-at="2023-07-07T15:55:45 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeleteById -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.TestReferenceDocumentDAOImpl@57d0c779]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testFindById()[pri:0, instance:test.TestReferenceDocumentDAOImpl@57d0c779]" started-at="2023-07-07T15:55:45 IST" name="testFindById" finished-at="2023-07-07T15:55:45 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFindById -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.TestReferenceDocumentDAOImpl@57d0c779]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetDOCIndex()[pri:0, instance:test.TestReferenceDocumentDAOImpl@57d0c779]" started-at="2023-07-07T15:55:45 IST" name="testGetDOCIndex" finished-at="2023-07-07T15:55:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetDOCIndex -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.TestReferenceDocumentDAOImpl@57d0c779]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetIndex()[pri:0, instance:test.TestReferenceDocumentDAOImpl@57d0c779]" started-at="2023-07-07T15:55:45 IST" name="testGetIndex" finished-at="2023-07-07T15:55:45 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetIndex -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.TestReferenceDocumentDAOImpl@57d0c779]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testSave()[pri:0, instance:test.TestReferenceDocumentDAOImpl@57d0c779]" started-at="2023-07-07T15:55:45 IST" name="testSave" finished-at="2023-07-07T15:55:45 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSave -->
      </class> <!-- test.TestReferenceDocumentDAOImpl -->
      <class name="test.ApplyPermissionDAOImplTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:38 IST" name="setUp" finished-at="2023-07-07T15:55:43 IST" duration-ms="4831" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testAppliedPermissions()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="testAppliedPermissions" finished-at="2023-07-07T15:55:43 IST" duration-ms="195" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAppliedPermissions -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="setUp" finished-at="2023-07-07T15:55:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetEmployeeAndPermissionRequestData()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="testGetEmployeeAndPermissionRequestData" finished-at="2023-07-07T15:55:43 IST" duration-ms="292" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetEmployeeAndPermissionRequestData -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="setUp" finished-at="2023-07-07T15:55:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetEmployeeAndPermissionRequestDataCountPerMonth()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="testGetEmployeeAndPermissionRequestDataCountPerMonth" finished-at="2023-07-07T15:55:43 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetEmployeeAndPermissionRequestDataCountPerMonth -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="setUp" finished-at="2023-07-07T15:55:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetEmployeeAndPermissionRequestData_NoResult()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="testGetEmployeeAndPermissionRequestData_NoResult" finished-at="2023-07-07T15:55:43 IST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetEmployeeAndPermissionRequestData_NoResult -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="setUp" finished-at="2023-07-07T15:55:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetEmployeeApprovedPermissionsCount()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="testGetEmployeeApprovedPermissionsCount" finished-at="2023-07-07T15:55:43 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetEmployeeApprovedPermissionsCount -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="setUp" finished-at="2023-07-07T15:55:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetEmployeesByHRAndManager()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="testGetEmployeesByHRAndManager" finished-at="2023-07-07T15:55:43 IST" duration-ms="169" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetEmployeesByHRAndManager -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="setUp" finished-at="2023-07-07T15:55:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetNextPermissionIndex()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="testGetNextPermissionIndex" finished-at="2023-07-07T15:55:43 IST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetNextPermissionIndex -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="setUp" finished-at="2023-07-07T15:55:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetPermissionByIdAndIndex()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="testGetPermissionByIdAndIndex" finished-at="2023-07-07T15:55:43 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPermissionByIdAndIndex -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="setUp" finished-at="2023-07-07T15:55:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetPermissionByIdAndIndex_NoResult()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="testGetPermissionByIdAndIndex_NoResult" finished-at="2023-07-07T15:55:43 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPermissionByIdAndIndex_NoResult -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="setUp" finished-at="2023-07-07T15:55:43 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPersist()[pri:0, instance:test.ApplyPermissionDAOImplTest@6c502018]" started-at="2023-07-07T15:55:43 IST" name="testPersist" finished-at="2023-07-07T15:55:43 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPersist -->
      </class> <!-- test.ApplyPermissionDAOImplTest -->
      <class name="test.EmployeeDAOImplTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:test.EmployeeDAOImplTest@a1c4f69]" started-at="2023-07-07T15:55:43 IST" name="setup" finished-at="2023-07-07T15:55:43 IST" duration-ms="36" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetAllEmployees()[pri:0, instance:test.EmployeeDAOImplTest@a1c4f69]" started-at="2023-07-07T15:55:43 IST" name="testGetAllEmployees" finished-at="2023-07-07T15:55:43 IST" duration-ms="19" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllEmployees -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.EmployeeDAOImplTest@a1c4f69]" started-at="2023-07-07T15:55:43 IST" name="setup" finished-at="2023-07-07T15:55:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetEmployee()[pri:0, instance:test.EmployeeDAOImplTest@a1c4f69]" started-at="2023-07-07T15:55:43 IST" name="testGetEmployee" finished-at="2023-07-07T15:55:43 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetEmployee -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.EmployeeDAOImplTest@a1c4f69]" started-at="2023-07-07T15:55:43 IST" name="setup" finished-at="2023-07-07T15:55:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetEmployeeById()[pri:0, instance:test.EmployeeDAOImplTest@a1c4f69]" started-at="2023-07-07T15:55:43 IST" name="testGetEmployeeById" finished-at="2023-07-07T15:55:43 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetEmployeeById -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.EmployeeDAOImplTest@a1c4f69]" started-at="2023-07-07T15:55:43 IST" name="setup" finished-at="2023-07-07T15:55:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetEmployeeParametersById()[pri:0, instance:test.EmployeeDAOImplTest@a1c4f69]" started-at="2023-07-07T15:55:43 IST" name="testGetEmployeeParametersById" finished-at="2023-07-07T15:55:43 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetEmployeeParametersById -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.EmployeeDAOImplTest@a1c4f69]" started-at="2023-07-07T15:55:43 IST" name="setup" finished-at="2023-07-07T15:55:43 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetEmployeesByHRAndManager()[pri:0, instance:test.EmployeeDAOImplTest@a1c4f69]" started-at="2023-07-07T15:55:43 IST" name="testGetEmployeesByHRAndManager" finished-at="2023-07-07T15:55:43 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetEmployeesByHRAndManager -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.EmployeeDAOImplTest@a1c4f69]" started-at="2023-07-07T15:55:43 IST" name="setup" finished-at="2023-07-07T15:55:44 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testInsertEmployee()[pri:0, instance:test.EmployeeDAOImplTest@a1c4f69]" started-at="2023-07-07T15:55:44 IST" name="testInsertEmployee" finished-at="2023-07-07T15:55:44 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInsertEmployee -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.EmployeeDAOImplTest@a1c4f69]" started-at="2023-07-07T15:55:44 IST" name="setup" finished-at="2023-07-07T15:55:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testUpdateEmployee()[pri:0, instance:test.EmployeeDAOImplTest@a1c4f69]" started-at="2023-07-07T15:55:44 IST" name="testUpdateEmployee" finished-at="2023-07-07T15:55:44 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateEmployee -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.EmployeeDAOImplTest@a1c4f69]" started-at="2023-07-07T15:55:44 IST" name="setup" finished-at="2023-07-07T15:55:44 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testUpdateEmployeeStatus()[pri:0, instance:test.EmployeeDAOImplTest@a1c4f69]" started-at="2023-07-07T15:55:44 IST" name="testUpdateEmployeeStatus" finished-at="2023-07-07T15:55:44 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateEmployeeStatus -->
      </class> <!-- test.EmployeeDAOImplTest -->
      <class name="test.TestEmploymentInductionDocDAOImpl">
        <test-method is-config="true" signature="setup()[pri:0, instance:test.TestEmploymentInductionDocDAOImpl@74471600]" started-at="2023-07-07T15:55:44 IST" name="setup" finished-at="2023-07-07T15:55:44 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testAddEmploymentInductionDocument()[pri:0, instance:test.TestEmploymentInductionDocDAOImpl@74471600]" started-at="2023-07-07T15:55:44 IST" name="testAddEmploymentInductionDocument" finished-at="2023-07-07T15:55:44 IST" duration-ms="69" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddEmploymentInductionDocument -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.TestEmploymentInductionDocDAOImpl@74471600]" started-at="2023-07-07T15:55:44 IST" name="setup" finished-at="2023-07-07T15:55:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetAllDocuments()[pri:0, instance:test.TestEmploymentInductionDocDAOImpl@74471600]" started-at="2023-07-07T15:55:44 IST" name="testGetAllDocuments" finished-at="2023-07-07T15:55:44 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllDocuments -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.TestEmploymentInductionDocDAOImpl@74471600]" started-at="2023-07-07T15:55:44 IST" name="setup" finished-at="2023-07-07T15:55:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetDocTypeList()[pri:0, instance:test.TestEmploymentInductionDocDAOImpl@74471600]" started-at="2023-07-07T15:55:44 IST" name="testGetDocTypeList" finished-at="2023-07-07T15:55:44 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetDocTypeList -->
      </class> <!-- test.TestEmploymentInductionDocDAOImpl -->
      <class name="test.EmployeeAttendanceServiceTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.EmployeeAttendanceServiceTest@1cc878e6]" started-at="2023-07-07T15:55:44 IST" name="setUp" finished-at="2023-07-07T15:55:44 IST" duration-ms="381" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testCalculateAttendance()[pri:0, instance:test.EmployeeAttendanceServiceTest@1cc878e6]" started-at="2023-07-07T15:55:44 IST" name="testCalculateAttendance" finished-at="2023-07-07T15:55:44 IST" duration-ms="103" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateAttendance -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.EmployeeAttendanceServiceTest@1cc878e6]" started-at="2023-07-07T15:55:44 IST" name="setUp" finished-at="2023-07-07T15:55:44 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConvertToDateTime_WhenCellContainsDateTime_ReturnsDateTimeValue()[pri:0, instance:test.EmployeeAttendanceServiceTest@1cc878e6]" started-at="2023-07-07T15:55:44 IST" name="testConvertToDateTime_WhenCellContainsDateTime_ReturnsDateTimeValue" finished-at="2023-07-07T15:55:44 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertToDateTime_WhenCellContainsDateTime_ReturnsDateTimeValue -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.EmployeeAttendanceServiceTest@1cc878e6]" started-at="2023-07-07T15:55:44 IST" name="setUp" finished-at="2023-07-07T15:55:44 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConvertToDateTime_WhenCellDoesNotContainDateTime_ReturnsNull()[pri:0, instance:test.EmployeeAttendanceServiceTest@1cc878e6]" started-at="2023-07-07T15:55:44 IST" name="testConvertToDateTime_WhenCellDoesNotContainDateTime_ReturnsNull" finished-at="2023-07-07T15:55:44 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertToDateTime_WhenCellDoesNotContainDateTime_ReturnsNull -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.EmployeeAttendanceServiceTest@1cc878e6]" started-at="2023-07-07T15:55:44 IST" name="setUp" finished-at="2023-07-07T15:55:44 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetAvgPunchInAndOut_WithNoPunchData_ReturnsEmptyList()[pri:0, instance:test.EmployeeAttendanceServiceTest@1cc878e6]" started-at="2023-07-07T15:55:44 IST" name="testGetAvgPunchInAndOut_WithNoPunchData_ReturnsEmptyList" finished-at="2023-07-07T15:55:45 IST" duration-ms="86" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAvgPunchInAndOut_WithNoPunchData_ReturnsEmptyList -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.EmployeeAttendanceServiceTest@1cc878e6]" started-at="2023-07-07T15:55:45 IST" name="setUp" finished-at="2023-07-07T15:55:45 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetAvgPunchInAndOut_WithValidData_ReturnsAveragePunchInAndOutTimes()[pri:0, instance:test.EmployeeAttendanceServiceTest@1cc878e6]" started-at="2023-07-07T15:55:45 IST" name="testGetAvgPunchInAndOut_WithValidData_ReturnsAveragePunchInAndOutTimes" finished-at="2023-07-07T15:55:45 IST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAvgPunchInAndOut_WithValidData_ReturnsAveragePunchInAndOutTimes -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.EmployeeAttendanceServiceTest@1cc878e6]" started-at="2023-07-07T15:55:45 IST" name="setUp" finished-at="2023-07-07T15:55:45 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetYears()[pri:0, instance:test.EmployeeAttendanceServiceTest@1cc878e6]" started-at="2023-07-07T15:55:45 IST" name="testGetYears" finished-at="2023-07-07T15:55:45 IST" duration-ms="67" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetYears -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.EmployeeAttendanceServiceTest@1cc878e6]" started-at="2023-07-07T15:55:45 IST" name="setUp" finished-at="2023-07-07T15:55:45 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetYesterdayPunchData()[pri:0, instance:test.EmployeeAttendanceServiceTest@1cc878e6]" started-at="2023-07-07T15:55:45 IST" name="testGetYesterdayPunchData" finished-at="2023-07-07T15:55:45 IST" duration-ms="141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetYesterdayPunchData -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.EmployeeAttendanceServiceTest@1cc878e6]" started-at="2023-07-07T15:55:45 IST" name="setUp" finished-at="2023-07-07T15:55:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInsertEmployeeAttendance()[pri:0, instance:test.EmployeeAttendanceServiceTest@1cc878e6]" started-at="2023-07-07T15:55:45 IST" name="testInsertEmployeeAttendance" finished-at="2023-07-07T15:55:45 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInsertEmployeeAttendance -->
      </class> <!-- test.EmployeeAttendanceServiceTest -->
      <class name="test.EmployeeLeaveServiceTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:test.EmployeeLeaveServiceTest@3070f59f]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testCalculateLeavesTakenBetweenDates()[pri:0, instance:test.EmployeeLeaveServiceTest@3070f59f]" started-at="2023-07-07T15:55:45 IST" name="testCalculateLeavesTakenBetweenDates" finished-at="2023-07-07T15:55:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateLeavesTakenBetweenDates -->
        <test-method signature="testCalculateLeavesTakenBetweenDatesWithNullDates()[pri:0, instance:test.EmployeeLeaveServiceTest@3070f59f]" started-at="2023-07-07T15:55:45 IST" name="testCalculateLeavesTakenBetweenDatesWithNullDates" finished-at="2023-07-07T15:55:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateLeavesTakenBetweenDatesWithNullDates -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.EmployeeLeaveServiceTest@3070f59f]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testCalculateLeavesTakenBetweenDatesWithSameDate()[pri:0, instance:test.EmployeeLeaveServiceTest@3070f59f]" started-at="2023-07-07T15:55:45 IST" name="testCalculateLeavesTakenBetweenDatesWithSameDate" finished-at="2023-07-07T15:55:45 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateLeavesTakenBetweenDatesWithSameDate -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.EmployeeLeaveServiceTest@3070f59f]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testCalculateLeavesTaken_NoLeaves()[pri:0, instance:test.EmployeeLeaveServiceTest@3070f59f]" started-at="2023-07-07T15:55:45 IST" name="testCalculateLeavesTaken_NoLeaves" finished-at="2023-07-07T15:55:45 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateLeavesTaken_NoLeaves -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.EmployeeLeaveServiceTest@3070f59f]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.EmployeeLeaveServiceTest@3070f59f]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testCalculateLeavesTaken_PendingLeaves()[pri:0, instance:test.EmployeeLeaveServiceTest@3070f59f]" started-at="2023-07-07T15:55:45 IST" name="testCalculateLeavesTaken_PendingLeaves" finished-at="2023-07-07T15:55:45 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateLeavesTaken_PendingLeaves -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.EmployeeLeaveServiceTest@3070f59f]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testCalculateLeavesTaken_WithLeaves()[pri:0, instance:test.EmployeeLeaveServiceTest@3070f59f]" started-at="2023-07-07T15:55:45 IST" name="testCalculateLeavesTaken_WithLeaves" finished-at="2023-07-07T15:55:45 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateLeavesTaken_WithLeaves -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.EmployeeLeaveServiceTest@3070f59f]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testSendEmail()[pri:0, instance:test.EmployeeLeaveServiceTest@3070f59f]" started-at="2023-07-07T15:55:45 IST" name="testSendEmail" finished-at="2023-07-07T15:55:46 IST" duration-ms="448" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "service_interfaces.MailServiceInterface.sendLeaveRequestMail(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, models.input.output.EmployeeLeaveInputModel, String, String)" because "this.mailService" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "service_interfaces.MailServiceInterface.sendLeaveRequestMail(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, models.input.output.EmployeeLeaveInputModel, String, String)" because "this.mailService" is null
at service.EmployeeLeaveService.sendEmail(EmployeeLeaveService.java:130)
at test.EmployeeLeaveServiceTest.testSendEmail(EmployeeLeaveServiceTest.java:229)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1510)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSendEmail -->
      </class> <!-- test.EmployeeLeaveServiceTest -->
      <class name="test.OfferLetterDAOImplTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.OfferLetterDAOImplTest@7a285418]" started-at="2023-07-07T15:55:44 IST" name="setUp" finished-at="2023-07-07T15:55:44 IST" duration-ms="176" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testFindAllIssuedCandidates()[pri:0, instance:test.OfferLetterDAOImplTest@7a285418]" started-at="2023-07-07T15:55:44 IST" name="testFindAllIssuedCandidates" finished-at="2023-07-07T15:55:44 IST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFindAllIssuedCandidates -->
        <test-method signature="testFindAllProvidedCandidates()[pri:0, instance:test.OfferLetterDAOImplTest@7a285418]" started-at="2023-07-07T15:55:44 IST" name="testFindAllProvidedCandidates" finished-at="2023-07-07T15:55:44 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFindAllProvidedCandidates -->
        <test-method signature="testFindIdtyIdByTitle()[pri:0, instance:test.OfferLetterDAOImplTest@7a285418]" started-at="2023-07-07T15:55:44 IST" name="testFindIdtyIdByTitle" finished-at="2023-07-07T15:55:44 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFindIdtyIdByTitle -->
        <test-method signature="testGetAllDocuments()[pri:0, instance:test.OfferLetterDAOImplTest@7a285418]" started-at="2023-07-07T15:55:44 IST" name="testGetAllDocuments" finished-at="2023-07-07T15:55:44 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllDocuments -->
        <test-method signature="testGetCandidateById()[pri:0, instance:test.OfferLetterDAOImplTest@7a285418]" started-at="2023-07-07T15:55:44 IST" name="testGetCandidateById" finished-at="2023-07-07T15:55:44 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetCandidateById -->
        <test-method signature="testGetHrById()[pri:0, instance:test.OfferLetterDAOImplTest@7a285418]" started-at="2023-07-07T15:55:44 IST" name="testGetHrById" finished-at="2023-07-07T15:55:44 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetHrById -->
        <test-method signature="testGetInductionDocuments()[pri:0, instance:test.OfferLetterDAOImplTest@7a285418]" started-at="2023-07-07T15:55:44 IST" name="testGetInductionDocuments" finished-at="2023-07-07T15:55:44 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetInductionDocuments -->
        <test-method signature="testGetLatestEofrIdFromDatabase()[pri:0, instance:test.OfferLetterDAOImplTest@7a285418]" started-at="2023-07-07T15:55:44 IST" name="testGetLatestEofrIdFromDatabase" finished-at="2023-07-07T15:55:44 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetLatestEofrIdFromDatabase -->
        <test-method signature="testInsertEofrInto()[pri:0, instance:test.OfferLetterDAOImplTest@7a285418]" started-at="2023-07-07T15:55:44 IST" name="testInsertEofrInto" finished-at="2023-07-07T15:55:44 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInsertEofrInto -->
        <test-method signature="testUpdateCandidateStatus()[pri:0, instance:test.OfferLetterDAOImplTest@7a285418]" started-at="2023-07-07T15:55:44 IST" name="testUpdateCandidateStatus" finished-at="2023-07-07T15:55:44 IST" duration-ms="18" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "java.lang.Integer.intValue()" because the return value of "models.Candidate.getCandId()" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "java.lang.Integer.intValue()" because the return value of "models.Candidate.getCandId()" is null
at DAO.OfferLetterDAOImpl.updateCandidateStatus(OfferLetterDAOImpl.java:92)
at test.OfferLetterDAOImplTest.testUpdateCandidateStatus(OfferLetterDAOImplTest.java:123)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1510)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateCandidateStatus -->
        <test-method signature="testUpdateEmploymentOfferDocuments()[pri:0, instance:test.OfferLetterDAOImplTest@7a285418]" started-at="2023-07-07T15:55:44 IST" name="testUpdateEmploymentOfferDocuments" finished-at="2023-07-07T15:55:44 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateEmploymentOfferDocuments -->
      </class> <!-- test.OfferLetterDAOImplTest -->
      <class name="test.PayRollServiceImplTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.PayRollServiceImplTest@4c682826]" started-at="2023-07-07T15:55:43 IST" name="setUp" finished-at="2023-07-07T15:55:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testCalculateAdditions()[pri:0, instance:test.PayRollServiceImplTest@4c682826]" started-at="2023-07-07T15:55:43 IST" name="testCalculateAdditions" finished-at="2023-07-07T15:55:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateAdditions -->
        <test-method signature="testCalculateBasicPay()[pri:0, instance:test.PayRollServiceImplTest@4c682826]" started-at="2023-07-07T15:55:43 IST" name="testCalculateBasicPay" finished-at="2023-07-07T15:55:43 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateBasicPay -->
        <test-method signature="testCalculateDA()[pri:0, instance:test.PayRollServiceImplTest@4c682826]" started-at="2023-07-07T15:55:43 IST" name="testCalculateDA" finished-at="2023-07-07T15:55:43 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateDA -->
        <test-method signature="testCalculateDeductions()[pri:0, instance:test.PayRollServiceImplTest@4c682826]" started-at="2023-07-07T15:55:43 IST" name="testCalculateDeductions" finished-at="2023-07-07T15:55:43 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateDeductions -->
        <test-method signature="testCalculateESI()[pri:0, instance:test.PayRollServiceImplTest@4c682826]" started-at="2023-07-07T15:55:43 IST" name="testCalculateESI" finished-at="2023-07-07T15:55:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateESI -->
        <test-method signature="testCalculateGratuity()[pri:0, instance:test.PayRollServiceImplTest@4c682826]" started-at="2023-07-07T15:55:43 IST" name="testCalculateGratuity" finished-at="2023-07-07T15:55:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateGratuity -->
        <test-method signature="testCalculateHRA()[pri:0, instance:test.PayRollServiceImplTest@4c682826]" started-at="2023-07-07T15:55:43 IST" name="testCalculateHRA" finished-at="2023-07-07T15:55:43 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateHRA -->
        <test-method signature="testCalculateNetPay()[pri:0, instance:test.PayRollServiceImplTest@4c682826]" started-at="2023-07-07T15:55:43 IST" name="testCalculateNetPay" finished-at="2023-07-07T15:55:43 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateNetPay -->
        <test-method signature="testCalculatePF()[pri:0, instance:test.PayRollServiceImplTest@4c682826]" started-at="2023-07-07T15:55:43 IST" name="testCalculatePF" finished-at="2023-07-07T15:55:43 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculatePF -->
        <test-method signature="testCalculateTA()[pri:0, instance:test.PayRollServiceImplTest@4c682826]" started-at="2023-07-07T15:55:43 IST" name="testCalculateTA" finished-at="2023-07-07T15:55:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateTA -->
        <test-method signature="testCalculateTax()[pri:0, instance:test.PayRollServiceImplTest@4c682826]" started-at="2023-07-07T15:55:43 IST" name="testCalculateTax" finished-at="2023-07-07T15:55:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateTax -->
        <test-method signature="testCalculateTotalPay()[pri:0, instance:test.PayRollServiceImplTest@4c682826]" started-at="2023-07-07T15:55:43 IST" name="testCalculateTotalPay" finished-at="2023-07-07T15:55:43 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateTotalPay -->
      </class> <!-- test.PayRollServiceImplTest -->
      <class name="test.CandidateDAOImplTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.CandidateDAOImplTest@79e33802]" started-at="2023-07-07T15:55:44 IST" name="setUp" finished-at="2023-07-07T15:55:44 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetAllCandidates()[pri:0, instance:test.CandidateDAOImplTest@79e33802]" started-at="2023-07-07T15:55:44 IST" name="testGetAllCandidates" finished-at="2023-07-07T15:55:44 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllCandidates -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.CandidateDAOImplTest@79e33802]" started-at="2023-07-07T15:55:44 IST" name="setUp" finished-at="2023-07-07T15:55:44 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetCandidateById()[pri:0, instance:test.CandidateDAOImplTest@79e33802]" started-at="2023-07-07T15:55:44 IST" name="testGetCandidateById" finished-at="2023-07-07T15:55:44 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetCandidateById -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.CandidateDAOImplTest@79e33802]" started-at="2023-07-07T15:55:44 IST" name="setUp" finished-at="2023-07-07T15:55:44 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testSaveCandidate()[pri:0, instance:test.CandidateDAOImplTest@79e33802]" started-at="2023-07-07T15:55:44 IST" name="testSaveCandidate" finished-at="2023-07-07T15:55:44 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSaveCandidate -->
      </class> <!-- test.CandidateDAOImplTest -->
      <class name="test.TestEmploymentInductionDocumentService">
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.TestEmploymentInductionDocumentService@2f16c21f]" started-at="2023-07-07T15:55:46 IST" name="setUp" finished-at="2023-07-07T15:55:46 IST" duration-ms="55" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testAddCandidateInductionDocument()[pri:0, instance:test.TestEmploymentInductionDocumentService@2f16c21f]" started-at="2023-07-07T15:55:46 IST" name="testAddCandidateInductionDocument" finished-at="2023-07-07T15:55:46 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddCandidateInductionDocument -->
        <test-method signature="testGetAllDocuments()[pri:0, instance:test.TestEmploymentInductionDocumentService@2f16c21f]" started-at="2023-07-07T15:55:46 IST" name="testGetAllDocuments" finished-at="2023-07-07T15:55:46 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllDocuments -->
      </class> <!-- test.TestEmploymentInductionDocumentService -->
      <class name="test.TestReferenceDocumentServiceImpl">
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.TestReferenceDocumentServiceImpl@4545cfc0]" started-at="2023-07-07T15:55:46 IST" name="setUp" finished-at="2023-07-07T15:55:46 IST" duration-ms="50" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testAddReferenceDocument()[pri:0, instance:test.TestReferenceDocumentServiceImpl@4545cfc0]" started-at="2023-07-07T15:55:46 IST" name="testAddReferenceDocument" finished-at="2023-07-07T15:55:46 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddReferenceDocument -->
        <test-method signature="testDeleteReferenceDocument()[pri:0, instance:test.TestReferenceDocumentServiceImpl@4545cfc0]" started-at="2023-07-07T15:55:46 IST" name="testDeleteReferenceDocument" finished-at="2023-07-07T15:55:46 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeleteReferenceDocument -->
        <test-method signature="testGetAllDocuments()[pri:0, instance:test.TestReferenceDocumentServiceImpl@4545cfc0]" started-at="2023-07-07T15:55:46 IST" name="testGetAllDocuments" finished-at="2023-07-07T15:55:46 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllDocuments -->
        <test-method signature="testGetReferenceDocumentById()[pri:0, instance:test.TestReferenceDocumentServiceImpl@4545cfc0]" started-at="2023-07-07T15:55:46 IST" name="testGetReferenceDocumentById" finished-at="2023-07-07T15:55:46 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetReferenceDocumentById -->
      </class> <!-- test.TestReferenceDocumentServiceImpl -->
      <class name="test.TestEmploymentInductionService">
        <test-method is-config="true" signature="setup()[pri:0, instance:test.TestEmploymentInductionService@72ae1007]" started-at="2023-07-07T15:55:46 IST" name="setup" finished-at="2023-07-07T15:55:46 IST" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetAllEmploymentOffers()[pri:0, instance:test.TestEmploymentInductionService@72ae1007]" started-at="2023-07-07T15:55:46 IST" name="testGetAllEmploymentOffers" finished-at="2023-07-07T15:55:46 IST" duration-ms="21" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllEmploymentOffers -->
        <test-method signature="testGetId()[pri:0, instance:test.TestEmploymentInductionService@72ae1007]" started-at="2023-07-07T15:55:46 IST" name="testGetId" finished-at="2023-07-07T15:55:46 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetId -->
        <test-method signature="testGetStatusById()[pri:0, instance:test.TestEmploymentInductionService@72ae1007]" started-at="2023-07-07T15:55:46 IST" name="testGetStatusById" finished-at="2023-07-07T15:55:46 IST" duration-ms="3" status="FAIL">
          <exception class="java.lang.AssertionError">
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError
at test.TestEmploymentInductionService.testGetStatusById(TestEmploymentInductionService.java:98)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1510)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetStatusById -->
      </class> <!-- test.TestEmploymentInductionService -->
      <class name="test.PayRollDAOImplTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:test.PayRollDAOImplTest@2314f013]" started-at="2023-07-07T15:55:46 IST" name="setup" finished-at="2023-07-07T15:55:46 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetEmployeePayslipsByEmployeeId()[pri:0, instance:test.PayRollDAOImplTest@2314f013]" started-at="2023-07-07T15:55:46 IST" name="testGetEmployeePayslipsByEmployeeId" finished-at="2023-07-07T15:55:46 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetEmployeePayslipsByEmployeeId -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.PayRollDAOImplTest@2314f013]" started-at="2023-07-07T15:55:46 IST" name="setup" finished-at="2023-07-07T15:55:46 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetEmployeePayslipsByEmployeeIdAndMonthYear()[pri:0, instance:test.PayRollDAOImplTest@2314f013]" started-at="2023-07-07T15:55:46 IST" name="testGetEmployeePayslipsByEmployeeIdAndMonthYear" finished-at="2023-07-07T15:55:46 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetEmployeePayslipsByEmployeeIdAndMonthYear -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.PayRollDAOImplTest@2314f013]" started-at="2023-07-07T15:55:46 IST" name="setup" finished-at="2023-07-07T15:55:46 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testInsertEmployeePayslip()[pri:0, instance:test.PayRollDAOImplTest@2314f013]" started-at="2023-07-07T15:55:46 IST" name="testInsertEmployeePayslip" finished-at="2023-07-07T15:55:46 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInsertEmployeePayslip -->
      </class> <!-- test.PayRollDAOImplTest -->
      <class name="test.TestInductionDAOImpl">
        <test-method is-config="true" signature="setup()[pri:0, instance:test.TestInductionDAOImpl@80081d7]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetAllEmploymentOffers()[pri:0, instance:test.TestInductionDAOImpl@80081d7]" started-at="2023-07-07T15:55:45 IST" name="testGetAllEmploymentOffers" finished-at="2023-07-07T15:55:45 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllEmploymentOffers -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.TestInductionDAOImpl@80081d7]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetAllInductions()[pri:0, instance:test.TestInductionDAOImpl@80081d7]" started-at="2023-07-07T15:55:45 IST" name="testGetAllInductions" finished-at="2023-07-07T15:55:45 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllInductions -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.TestInductionDAOImpl@80081d7]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetEmployeeOfferedIdMaxMap()[pri:0, instance:test.TestInductionDAOImpl@80081d7]" started-at="2023-07-07T15:55:45 IST" name="testGetEmployeeOfferedIdMaxMap" finished-at="2023-07-07T15:55:45 IST" duration-ms="2" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "javax.persistence.TypedQuery.setParameter(String, Object)" because "typedQuery" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "javax.persistence.TypedQuery.setParameter(String, Object)" because "typedQuery" is null
at DAO.InductionDAOImpl.getCountOfOfferIdentity(InductionDAOImpl.java:108)
at test.TestInductionDAOImpl.testGetEmployeeOfferedIdMaxMap(TestInductionDAOImpl.java:168)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1510)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetEmployeeOfferedIdMaxMap -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.TestInductionDAOImpl@80081d7]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetEmploymentInductionDocCount()[pri:0, instance:test.TestInductionDAOImpl@80081d7]" started-at="2023-07-07T15:55:45 IST" name="testGetEmploymentInductionDocCount" finished-at="2023-07-07T15:55:45 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetEmploymentInductionDocCount -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.TestInductionDAOImpl@80081d7]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetEmploymentInductionDocCountMap()[pri:0, instance:test.TestInductionDAOImpl@80081d7]" started-at="2023-07-07T15:55:45 IST" name="testGetEmploymentInductionDocCountMap" finished-at="2023-07-07T15:55:45 IST" duration-ms="2" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "javax.persistence.TypedQuery.setParameter(String, Object)" because "typedQuery" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "javax.persistence.TypedQuery.setParameter(String, Object)" because "typedQuery" is null
at DAO.InductionDAOImpl.getEmploymentInductionDocCount(InductionDAOImpl.java:131)
at test.TestInductionDAOImpl.testGetEmploymentInductionDocCountMap(TestInductionDAOImpl.java:189)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1510)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetEmploymentInductionDocCountMap -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.TestInductionDAOImpl@80081d7]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetIndex()[pri:0, instance:test.TestInductionDAOImpl@80081d7]" started-at="2023-07-07T15:55:45 IST" name="testGetIndex" finished-at="2023-07-07T15:55:45 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetIndex -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.TestInductionDAOImpl@80081d7]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGetInductionById()[pri:0, instance:test.TestInductionDAOImpl@80081d7]" started-at="2023-07-07T15:55:45 IST" name="testGetInductionById" finished-at="2023-07-07T15:55:45 IST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetInductionById -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.TestInductionDAOImpl@80081d7]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testInsertEmployee()[pri:0, instance:test.TestInductionDAOImpl@80081d7]" started-at="2023-07-07T15:55:45 IST" name="testInsertEmployee" finished-at="2023-07-07T15:55:45 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInsertEmployee -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.TestInductionDAOImpl@80081d7]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testInsertEmployeeWithNullInduction()[pri:0, instance:test.TestInductionDAOImpl@80081d7]" started-at="2023-07-07T15:55:45 IST" name="testInsertEmployeeWithNullInduction" finished-at="2023-07-07T15:55:45 IST" duration-ms="2" status="PASS">
          <exception class="exceptions.CustomException">
            <message>
              <![CDATA[Custom exception message]]>
            </message>
            <full-stacktrace>
              <![CDATA[exceptions.CustomException: Custom exception message
at DAO.InductionDAOImpl.insertEmployee(InductionDAOImpl.java:51)
at test.TestInductionDAOImpl.testInsertEmployeeWithNullInduction(TestInductionDAOImpl.java:82)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1510)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- exceptions.CustomException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInsertEmployeeWithNullInduction -->
      </class> <!-- test.TestInductionDAOImpl -->
      <class name="test.OfferLetterControllerTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.OfferLetterControllerTest@247877f3]" started-at="2023-07-07T15:55:45 IST" name="setUp" finished-at="2023-07-07T15:55:45 IST" duration-ms="187" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetIssuingCandidates()[pri:0, instance:test.OfferLetterControllerTest@247877f3]" started-at="2023-07-07T15:55:45 IST" name="testGetIssuingCandidates" finished-at="2023-07-07T15:55:45 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetIssuingCandidates -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.OfferLetterControllerTest@247877f3]" started-at="2023-07-07T15:55:45 IST" name="setUp" finished-at="2023-07-07T15:55:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetOfferLetterProvidedCandidates()[pri:0, instance:test.OfferLetterControllerTest@247877f3]" started-at="2023-07-07T15:55:45 IST" name="testGetOfferLetterProvidedCandidates" finished-at="2023-07-07T15:55:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetOfferLetterProvidedCandidates -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.OfferLetterControllerTest@247877f3]" started-at="2023-07-07T15:55:45 IST" name="setUp" finished-at="2023-07-07T15:55:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testSendOfferMail()[pri:0, instance:test.OfferLetterControllerTest@247877f3]" started-at="2023-07-07T15:55:45 IST" name="testSendOfferMail" finished-at="2023-07-07T15:55:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSendOfferMail -->
      </class> <!-- test.OfferLetterControllerTest -->
      <class name="test.HolidayDAOImplTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:test.HolidayDAOImplTest@44bb6856]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="226" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testFindAllGradeHolidays()[pri:0, instance:test.HolidayDAOImplTest@44bb6856]" started-at="2023-07-07T15:55:45 IST" name="testFindAllGradeHolidays" finished-at="2023-07-07T15:55:45 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFindAllGradeHolidays -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.HolidayDAOImplTest@44bb6856]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testFindAllHolidays()[pri:0, instance:test.HolidayDAOImplTest@44bb6856]" started-at="2023-07-07T15:55:45 IST" name="testFindAllHolidays" finished-at="2023-07-07T15:55:45 IST" duration-ms="3" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "javax.persistence.criteria.CriteriaBuilder.createQuery(java.lang.Class)" because "cb" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "javax.persistence.criteria.CriteriaBuilder.createQuery(java.lang.Class)" because "cb" is null
at DAO.HolidayDAOImpl.findAllHolidays(HolidayDAOImpl.java:35)
at test.HolidayDAOImplTest.testFindAllHolidays(HolidayDAOImplTest.java:64)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1510)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFindAllHolidays -->
        <test-method is-config="true" signature="setup()[pri:0, instance:test.HolidayDAOImplTest@44bb6856]" started-at="2023-07-07T15:55:45 IST" name="setup" finished-at="2023-07-07T15:55:45 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testFindHolidayById()[pri:0, instance:test.HolidayDAOImplTest@44bb6856]" started-at="2023-07-07T15:55:45 IST" name="testFindHolidayById" finished-at="2023-07-07T15:55:45 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFindHolidayById -->
      </class> <!-- test.HolidayDAOImplTest -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
